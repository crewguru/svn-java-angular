/*
 * Created on 10 Aug 2016 ( Time 19:50:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.crewguru.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;

import com.crewguru.bean.WorkExperience;
import com.crewguru.bean.jpa.UserEntity;
import com.crewguru.bean.jpa.WorkExperienceEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class WorkExperienceServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public WorkExperienceServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'WorkExperienceEntity' to 'WorkExperience'
	 * @param workExperienceEntity
	 */
	public WorkExperience mapWorkExperienceEntityToWorkExperience(WorkExperienceEntity workExperienceEntity) {
		if(workExperienceEntity == null) {
			return null;
		}

		//--- Generic mapping 
		WorkExperience workExperience = map(workExperienceEntity, WorkExperience.class);

		//--- Link mapping ( link to User )
		if(workExperienceEntity.getUser() != null) {
			workExperience.setUserId(workExperienceEntity.getUser().getUserId());
		}
		return workExperience;
	}
	
	/**
	 * Mapping from 'WorkExperience' to 'WorkExperienceEntity'
	 * @param workExperience
	 * @param workExperienceEntity
	 */
	public void mapWorkExperienceToWorkExperienceEntity(WorkExperience workExperience, WorkExperienceEntity workExperienceEntity) {
		if(workExperience == null) {
			return;
		}

		//--- Generic mapping 
		map(workExperience, workExperienceEntity);

		//--- Link mapping ( link : workExperience )
		if( hasLinkToUser(workExperience) ) {
			UserEntity user1 = new UserEntity();
			user1.setUserId( workExperience.getUserId() );
			workExperienceEntity.setUser( user1 );
		} else {
			workExperienceEntity.setUser( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(WorkExperience workExperience) {
		if(workExperience.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}