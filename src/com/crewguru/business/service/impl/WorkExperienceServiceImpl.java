/*
 * Created on 10 Aug 2016 ( Time 19:50:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.crewguru.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import java.util.Date;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.crewguru.bean.WorkExperience;
import com.crewguru.bean.jpa.WorkExperienceEntity;
import com.crewguru.business.service.WorkExperienceService;
import com.crewguru.business.service.mapping.WorkExperienceServiceMapper;
import com.crewguru.data.repository.jpa.WorkExperienceJpaRepository;

/**
 * Implementation of WorkExperienceService
 */
@Component
@Transactional
public class WorkExperienceServiceImpl implements WorkExperienceService {

	@Resource
	private WorkExperienceJpaRepository workExperienceJpaRepository;

	@Resource
	private WorkExperienceServiceMapper workExperienceServiceMapper;
	
	@Override
	public WorkExperience findById(Integer id) {
		WorkExperienceEntity workExperienceEntity = workExperienceJpaRepository.findOne(id);
		return workExperienceServiceMapper.mapWorkExperienceEntityToWorkExperience(workExperienceEntity);
	}

	@Override
	public List<WorkExperience> findAll() {
		Iterable<WorkExperienceEntity> entities = workExperienceJpaRepository.findAll();
		List<WorkExperience> beans = new ArrayList<WorkExperience>();
		for(WorkExperienceEntity workExperienceEntity : entities) {
			beans.add(workExperienceServiceMapper.mapWorkExperienceEntityToWorkExperience(workExperienceEntity));
		}
		return beans;
	}

	@Override
	public WorkExperience save(WorkExperience workExperience) {
		return update(workExperience) ;
	}

	@Override
	public WorkExperience create(WorkExperience workExperience) {
		WorkExperienceEntity workExperienceEntity = workExperienceJpaRepository.findOne(workExperience.getId());
		if( workExperienceEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		workExperienceEntity = new WorkExperienceEntity();
		workExperienceServiceMapper.mapWorkExperienceToWorkExperienceEntity(workExperience, workExperienceEntity);
		WorkExperienceEntity workExperienceEntitySaved = workExperienceJpaRepository.save(workExperienceEntity);
		return workExperienceServiceMapper.mapWorkExperienceEntityToWorkExperience(workExperienceEntitySaved);
	}

	@Override
	public WorkExperience update(WorkExperience workExperience) {
		WorkExperienceEntity workExperienceEntity = workExperienceJpaRepository.findOne(workExperience.getId());
		workExperienceServiceMapper.mapWorkExperienceToWorkExperienceEntity(workExperience, workExperienceEntity);
		WorkExperienceEntity workExperienceEntitySaved = workExperienceJpaRepository.save(workExperienceEntity);
		return workExperienceServiceMapper.mapWorkExperienceEntityToWorkExperience(workExperienceEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		workExperienceJpaRepository.delete(id);
	}

	public WorkExperienceJpaRepository getWorkExperienceJpaRepository() {
		return workExperienceJpaRepository;
	}

	public void setWorkExperienceJpaRepository(WorkExperienceJpaRepository workExperienceJpaRepository) {
		this.workExperienceJpaRepository = workExperienceJpaRepository;
	}

	public WorkExperienceServiceMapper getWorkExperienceServiceMapper() {
		return workExperienceServiceMapper;
	}

	public void setWorkExperienceServiceMapper(WorkExperienceServiceMapper workExperienceServiceMapper) {
		this.workExperienceServiceMapper = workExperienceServiceMapper;
	}

}
