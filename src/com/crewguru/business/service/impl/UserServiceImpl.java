/*
 * Created on 10 Aug 2016 ( Time 19:50:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.crewguru.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import java.util.List;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.crewguru.bean.User;

import com.crewguru.bean.jpa.UserEntity;
import com.crewguru.bean.jpa.WorkCategoryEntity;
import com.crewguru.business.service.UserService;
import com.crewguru.business.service.mapping.UserServiceMapper;
import com.crewguru.data.repository.jpa.UserJpaRepository;

/**
 * Implementation of UserService
 */
@Component
@Transactional
public class UserServiceImpl implements UserService {

	@Resource
	private UserJpaRepository userJpaRepository;

	@Resource
	private UserServiceMapper userServiceMapper;
	
	@Override
	public User findById(String userId) {
		UserEntity userEntity = userJpaRepository.findOne(userId);
		User user=userServiceMapper.mapUserEntityToUser(userEntity);
		
		
		
		return user;
	}
	
	

	@Override
	public List<User> findAll() {
		Iterable<UserEntity> entities = userJpaRepository.findAll();
		List<User> beans = new ArrayList<User>();
		for(UserEntity userEntity : entities) {
			beans.add(userServiceMapper.mapUserEntityToUser(userEntity));
		}
		return beans;
	}

	@Override
	public User save(User user) {
		return update(user) ;
	}

	@Override
	public User create(User user) {
		UserEntity userEntity = userJpaRepository.findOne(user.getUserId());
		if( userEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		userEntity = new UserEntity();
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	@Override
	public User update(User user) {
		UserEntity userEntity = userJpaRepository.findOne(user.getUserId());
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		if(userEntity.getListOfLocation() !=null)
			userEntity.getListOfLocation().stream().forEach(item -> item.setUser(userEntity));
		if(userEntity.getListOfUserProfile() !=null)
			userEntity.getListOfUserProfile().stream().forEach(item -> item.setUser(userEntity));
		if(userEntity.getListOfUserProjects() !=null)
			userEntity.getListOfUserProjects().stream().forEach(item -> item.setUser(userEntity));
		
		if(userEntity.getListOfWorkExperience() !=null)
			userEntity.getListOfWorkExperience().stream().forEach(item -> item.setUser(userEntity));
		
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	@Override
	public void delete(String userId) {
		userJpaRepository.delete(userId);
	}

	public UserJpaRepository getUserJpaRepository() {
		return userJpaRepository;
	}

	public void setUserJpaRepository(UserJpaRepository userJpaRepository) {
		this.userJpaRepository = userJpaRepository;
	}

	public UserServiceMapper getUserServiceMapper() {
		return userServiceMapper;
	}

	public void setUserServiceMapper(UserServiceMapper userServiceMapper) {
		this.userServiceMapper = userServiceMapper;
	}

}
