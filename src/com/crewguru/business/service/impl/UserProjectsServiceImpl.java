/*
 * Created on 10 Aug 2016 ( Time 19:50:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.crewguru.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.crewguru.bean.UserProjects;
import com.crewguru.bean.jpa.UserProjectsEntity;
import com.crewguru.business.service.UserProjectsService;
import com.crewguru.business.service.mapping.UserProjectsServiceMapper;
import com.crewguru.data.repository.jpa.UserProjectsJpaRepository;

/**
 * Implementation of UserProjectsService
 */
@Component
@Transactional
public class UserProjectsServiceImpl implements UserProjectsService {

	@Resource
	private UserProjectsJpaRepository userProjectsJpaRepository;

	@Resource
	private UserProjectsServiceMapper userProjectsServiceMapper;
	
	@Override
	public UserProjects findById(Integer id) {
		UserProjectsEntity userProjectsEntity = userProjectsJpaRepository.findOne(id);
		return userProjectsServiceMapper.mapUserProjectsEntityToUserProjects(userProjectsEntity);
	}

	@Override
	public List<UserProjects> findAll() {
		Iterable<UserProjectsEntity> entities = userProjectsJpaRepository.findAll();
		List<UserProjects> beans = new ArrayList<UserProjects>();
		for(UserProjectsEntity userProjectsEntity : entities) {
			beans.add(userProjectsServiceMapper.mapUserProjectsEntityToUserProjects(userProjectsEntity));
		}
		return beans;
	}

	@Override
	public UserProjects save(UserProjects userProjects) {
		return update(userProjects) ;
	}

	@Override
	public UserProjects create(UserProjects userProjects) {
		UserProjectsEntity userProjectsEntity = userProjectsJpaRepository.findOne(userProjects.getId());
		if( userProjectsEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		userProjectsEntity = new UserProjectsEntity();
		userProjectsServiceMapper.mapUserProjectsToUserProjectsEntity(userProjects, userProjectsEntity);
		UserProjectsEntity userProjectsEntitySaved = userProjectsJpaRepository.save(userProjectsEntity);
		return userProjectsServiceMapper.mapUserProjectsEntityToUserProjects(userProjectsEntitySaved);
	}

	@Override
	public UserProjects update(UserProjects userProjects) {
		UserProjectsEntity userProjectsEntity = userProjectsJpaRepository.findOne(userProjects.getId());
		userProjectsServiceMapper.mapUserProjectsToUserProjectsEntity(userProjects, userProjectsEntity);
		UserProjectsEntity userProjectsEntitySaved = userProjectsJpaRepository.save(userProjectsEntity);
		return userProjectsServiceMapper.mapUserProjectsEntityToUserProjects(userProjectsEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userProjectsJpaRepository.delete(id);
	}

	public UserProjectsJpaRepository getUserProjectsJpaRepository() {
		return userProjectsJpaRepository;
	}

	public void setUserProjectsJpaRepository(UserProjectsJpaRepository userProjectsJpaRepository) {
		this.userProjectsJpaRepository = userProjectsJpaRepository;
	}

	public UserProjectsServiceMapper getUserProjectsServiceMapper() {
		return userProjectsServiceMapper;
	}

	public void setUserProjectsServiceMapper(UserProjectsServiceMapper userProjectsServiceMapper) {
		this.userProjectsServiceMapper = userProjectsServiceMapper;
	}

}
