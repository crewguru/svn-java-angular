/*
 * Created on 10 Aug 2016 ( Time 19:50:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package com.crewguru.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import java.util.List;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.crewguru.bean.WorkCategory;
import com.crewguru.bean.jpa.WorkCategoryEntity;
import com.crewguru.business.service.WorkCategoryService;
import com.crewguru.business.service.mapping.WorkCategoryServiceMapper;
import com.crewguru.data.repository.jpa.WorkCategoryJpaRepository;

/**
 * Implementation of WorkCategoryService
 */
@Component
@Transactional
public class WorkCategoryServiceImpl implements WorkCategoryService {

	@Resource
	private WorkCategoryJpaRepository workCategoryJpaRepository;

	@Resource
	private WorkCategoryServiceMapper workCategoryServiceMapper;
	
	@Override
	public WorkCategory findById(Integer id) {
		WorkCategoryEntity workCategoryEntity = workCategoryJpaRepository.findOne(id);
		return workCategoryServiceMapper.mapWorkCategoryEntityToWorkCategory(workCategoryEntity);
	}

	@Override
	public List<WorkCategory> findAll() {
		Iterable<WorkCategoryEntity> entities = workCategoryJpaRepository.findAll();
		List<WorkCategory> beans = new ArrayList<WorkCategory>();
		for(WorkCategoryEntity workCategoryEntity : entities) {
			beans.add(workCategoryServiceMapper.mapWorkCategoryEntityToWorkCategory(workCategoryEntity));
		}
		return beans;
	}

	@Override
	public WorkCategory save(WorkCategory workCategory) {
		return update(workCategory) ;
	}

	@Override
	public WorkCategory create(WorkCategory workCategory) {
		WorkCategoryEntity workCategoryEntity = workCategoryJpaRepository.findOne(workCategory.getId());
		if( workCategoryEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		workCategoryEntity = new WorkCategoryEntity();
		workCategoryServiceMapper.mapWorkCategoryToWorkCategoryEntity(workCategory, workCategoryEntity);
		WorkCategoryEntity workCategoryEntitySaved = workCategoryJpaRepository.save(workCategoryEntity);
		return workCategoryServiceMapper.mapWorkCategoryEntityToWorkCategory(workCategoryEntitySaved);
	}

	@Override
	public WorkCategory update(WorkCategory workCategory) {
		WorkCategoryEntity workCategoryEntity = workCategoryJpaRepository.findOne(workCategory.getId());
		workCategoryServiceMapper.mapWorkCategoryToWorkCategoryEntity(workCategory, workCategoryEntity);
		WorkCategoryEntity workCategoryEntitySaved = workCategoryJpaRepository.save(workCategoryEntity);
		return workCategoryServiceMapper.mapWorkCategoryEntityToWorkCategory(workCategoryEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		workCategoryJpaRepository.delete(id);
	}

	public WorkCategoryJpaRepository getWorkCategoryJpaRepository() {
		return workCategoryJpaRepository;
	}

	public void setWorkCategoryJpaRepository(WorkCategoryJpaRepository workCategoryJpaRepository) {
		this.workCategoryJpaRepository = workCategoryJpaRepository;
	}

	public WorkCategoryServiceMapper getWorkCategoryServiceMapper() {
		return workCategoryServiceMapper;
	}

	public void setWorkCategoryServiceMapper(WorkCategoryServiceMapper workCategoryServiceMapper) {
		this.workCategoryServiceMapper = workCategoryServiceMapper;
	}

}
